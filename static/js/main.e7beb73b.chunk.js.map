{"version":3,"sources":["components/ShowAllComments.js","api/comments.js","App.js","reportWebVital.js","index.js"],"names":["ShowAllComments","comments","className","length","map","comment","name","date","time","text","id","BASE_URL","App","useState","setName","setText","isErrorVisible","setIsErrorVisible","setComments","ident","setCustomId","useEffect","fetch","then","response","ok","Error","json","res","type","placeholder","autoComplete","value","onChange","ev","target","onClick","trim","Date","newComment","toLocaleDateString","toLocaleTimeString","Http","XMLHttpRequest","open","send","JSON","stringify","onCommentSubmit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAyBeA,MAvBf,YAAwC,IAAbC,EAAY,EAAZA,SACzB,OACE,qBAAKC,UAAU,WAAf,SACE,oBAAIA,UAAU,iBAAd,SACGD,EAASE,OAAS,EAAIF,EAASG,KAAI,SAAAC,GAAO,OACzC,qBAEEH,UAAU,iBAFZ,UAIE,oBAAGA,UAAU,iBAAb,UACE,iCAASG,EAAQC,OACjB,sBAAMJ,UAAU,iBAAhB,mBACQG,EAAQE,KADhB,eAC2BF,EAAQG,WAGrC,mBAAGN,UAAU,iBAAb,SAA+BG,EAAQI,SATlCJ,EAAQK,OAWZ,QCnBPC,EAAW,yBCyFFC,MApFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNP,EADM,KACAQ,EADA,OAEWD,mBAAS,IAFpB,mBAENJ,EAFM,KAEAM,EAFA,OAG+BF,oBAAS,GAHxC,mBAGNG,EAHM,KAGUC,EAHV,OAImBJ,mBAAS,IAJ5B,mBAINZ,EAJM,KAIIiB,EAJJ,OAKgBL,mBAAS,IALzB,mBAKNM,EALM,KAKCC,EALD,KAwCb,OAjCAC,qBAAU,WACRJ,GAAkB,KACjB,CAACX,EAAMG,IAEVY,qBAAU,WDZJC,MAAMX,GACTY,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,2BAGnB,OAAOF,EAASG,UCOHJ,MAAK,SAAAK,GACjBV,EAAY,YAAIU,SAEjB,CAACT,IA0BF,sBAAKjB,UAAU,MAAf,UACE,uBACEA,UAAU,iBADZ,UAGE,mBAAGA,UAAU,YAAb,gCACA,uBACE2B,KAAK,OACLvB,KAAK,OACLwB,YAAY,YACZ5B,UAAU,yCACV6B,aAAa,MACbC,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAQpB,EAAQoB,EAAGC,OAAOH,UAGtC,0BACE1B,KAAK,OACLwB,YAAY,yBACZ5B,UAAU,yCACV8B,MAAOvB,EACPwB,SAAU,SAACC,GAAD,OAAQnB,EAAQmB,EAAGC,OAAOH,UAGrChB,GACC,qBAAKd,UAAU,wBAAf,6BAKF,wBACE2B,KAAK,SACL3B,UAAU,oDACVkC,QAxDW,WACjB,GAAK3B,EAAK4B,QAAW/B,EAAK+B,OAA1B,CAMA,IAAM9B,EAAO,IAAI+B,KACXC,EAAa,CACjBjC,OACAG,OACAC,GAAIH,EACJA,KAAMA,EAAKiC,qBACXhC,KAAMD,EAAKkC,sBAGbrB,EAAYb,GACZO,EAAQ,IACRC,EAAQ,ID1BL,SAAyBV,GAE9B,IAAMqC,EAAO,IAAIC,eACjBD,EAAKE,KAAK,OAAQjC,GAClB+B,EAAKG,KAAKC,KAAKC,UAAU1C,ICwBvB2C,CAAgBT,QAlBdtB,GAAkB,IAmDhB,8BASF,cAAC,EAAD,CAAiBhB,SAAUA,QCxElBgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.e7beb73b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction ShowAllComments({ comments }) {\n  return (\n    <div className=\"comments\">\n      <ul className=\"comments__list\">\n        {comments.length > 0 ? comments.map(comment => (\n          <li\n            key={comment.id}\n            className=\"comments__item\"\n          >\n            <p className=\"comments__name\">\n              <strong>{comment.name}</strong>\n              <span className=\"comments__date\">\n                  {`${comment.date} in ${comment.time}`}\n                </span>\n            </p>\n            <p className=\"comments__text\">{comment.text}</p>\n          </li>\n        )) : ''}\n      </ul>\n    </div>\n  );\n}\n\nexport default ShowAllComments;\n\nShowAllComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n\n  }).isRequired,).isRequired,\n};\n","const BASE_URL = 'http://localhost:8000/';\n\nexport function getComments() {\n\n return fetch(BASE_URL)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load comments');\n      }\n\n     return response.json()\n    });\n}\n\nexport function onCommentSubmit(comment) {\n\n  const Http = new XMLHttpRequest();\n  Http.open(\"POST\", BASE_URL);\n  Http.send(JSON.stringify(comment));\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport ShowAllComments from './components/ShowAllComments';\nimport {getComments, onCommentSubmit} from './api/comments';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const [isErrorVisible, setIsErrorVisible] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [ident, setCustomId] = useState('');\n\n  useEffect(() => {\n    setIsErrorVisible(false);\n  }, [name, text])\n\n  useEffect(() => {\n    getComments().then(res => {\n      setComments([...res]);\n    });\n  }, [ident]);\n\n  const addComment = () => {\n    if (!text.trim() || !name.trim()) {\n      setIsErrorVisible(true);\n\n      return;\n    }\n\n    const date = new Date();\n    const newComment = {\n      name,\n      text,\n      id: date,\n      date: date.toLocaleDateString(),\n      time: date.toLocaleTimeString(),\n    };\n\n    setCustomId(date);\n    setName('');\n    setText('');\n\n    onCommentSubmit(newComment);\n  }\n\n  return (\n    <div className=\"App\">\n      <form\n        className=\"NewCommentForm\"\n      >\n        <p className=\"App__fill\">Leave your comment</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input input is-primary\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={(ev) => setName(ev.target.value)}\n        />\n\n        <textarea\n          name=\"text\"\n          placeholder=\"Type your comment here\"\n          className=\"NewCommentForm__input input is-primary\"\n          value={text}\n          onChange={(ev) => setText(ev.target.value)}\n        />\n\n        {isErrorVisible && (\n          <div className=\"NewCommentForm__error\">\n            Write something\n          </div>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__button button is-success is-light\"\n          onClick={addComment}\n        >\n          Add a comment\n        </button>\n      </form>\n\n      <ShowAllComments comments={comments} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVital';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}